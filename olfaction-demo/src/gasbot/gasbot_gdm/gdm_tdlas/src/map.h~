#ifndef _MAP_H
#define _MAP_H

#include <iostream>
#include <string.h>
#include <ros/ros.h>
#include <visualization_msgs/Marker.h>
#include <geometry_msgs/Point.h>
#include <visualization_msgs/MarkerArray.h>
#include "cell.h"
#include <qpOASES.hpp>


USING_NAMESPACE_QPOASES

#define MAX_POINTS_PER_CELL 2000
#define NUM_CELL_TEMPLATES 100
#define	MAX_CONC2 2500;
namespace GdmTDLAS{

class GasMap{

	private:
		/** \brief minumum x coordinate of the map */
		float m_min_x;
		/** \brief maximum x coordinate of the map */
		float m_max_x;
		/** \brief minumum y coordinate of the map */
		float m_min_y;
		/** \brief maximum y coordinate of the map */
		float m_max_y;
		/** \brief minumum z coordinate of the map */
		float m_min_z;
		/** \brief maximum z coordinate of the map */
		float m_max_z;
		/** \brief size of the cell of the map */
		float m_cell_size;
		/** \brief maximum gas concentration (useful for visualization purposes)*/
		float m_max_conc;
		/** \brief number of cells in each dimension of the map */
		std::vector<int> m_num_cells;
		/** \brief Vector representing the floor */
		std::vector<float> m_cell_coords_x;
		/** \brief Vector representing the floor */
		std::vector<float> m_cell_coords_y;
		/** \brief Vector representing the floor */
		std::vector<float> m_cell_coords_z;
		/** \brief Vector representing the floor */
		std::vector<Cell> m_map;
		/** \brief Coordinate frame of the map */
		std::string m_frame;
		/** \brief Template pointclouds for filling the cells */
		pcl::PointCloud<pcl::PointXYZRGB> template_cells[NUM_CELL_TEMPLATES];
		/** \brief Projects the start and end point of the beam inside the area of the map */
		void ProjectEndpointsInBounds(geometry_msgs::Point *start, geometry_msgs::Point *end);

	public:
		/** \brief Default constructor */
		GasMap(float min_x, float max_x, float min_y, float max_y, float min_z, float max_z, float cell_size, float max_conc, std::string frame);
		/**
		 * Getter method
		 * @param dimension - values from 1 to 3
		 * @return number of cells in the specified dimension
		 */
		int getNumCells(int dimension);
		/**
		 * Sets the color of the cell to be visualized
		 * @param start beam start point
		 * @param end beam end point
		 * @param row vector containing the length traversed in each cell by the measurement at hand
		 * @param reading from the TDLAS sensor
		 * @return boolean value, TRUE success - FALSE failure
		 */
		bool CalculateNewMeasurementRow(geometry_msgs::Point start, geometry_msgs::Point end, float ppmm, std::vector<int> *idx, std::vector<float> *val);
		/**
		 * Updates the map according to the new model
		 * @param array of concentrations
		 * @return boolean value, TRUE success - FALSE failure
		 */
		bool updateMap(std::vector<real_t> *new_concentrations);		
		/**
		 * Publishes the map for visualization in a given frame
		 * @param array
		 * @param frame 
		 */
		void publish(ros::Publisher &tdlas_advertise);
		/**
		 * Print at screen information about the map 
		 */
		void printInfo();
		void printMapData();
};

class Intersection{
	public:
		float m_x;
		float m_y;
		float m_z;
		float m_t;
		int m_idx_x;
		int m_idx_y;
		int m_idx_z;
		static bool SortIntersectionPredicate(const Intersection& i1, const Intersection& i2){return i1.m_t < i2.m_t;}
};

//colormap: JET
static const float red[64] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0625,0.1250,0.1875,0.2500,0.3125,0.3750,0.4375,0.5000,0.5625,0.6250,0.6875,0.7500,0.8125,0.8750,0.9375,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,0.9375,0.8750,0.8125,0.7500,0.6875,0.6250,0.5625,0.5000};

static const float green[64] = {0,0,0,0,0,0,0,0,0.0625,0.1250,0.1875,0.2500,0.3125,0.3750,0.4375,0.5000,0.5625,0.6250,0.6875,0.7500,0.8125,0.8750,0.9375,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,0.9375,0.8750,0.8125,0.7500,0.6875,0.6250,0.5625,0.5000,0.4375,0.3750,0.3125,0.2500,0.1875,0.1250,0.0625,0,0,0,0,0,0,0,0,0};

static const float blue[64] = {0.5625,0.6250,0.6875,0.7500,0.8125,0.8750,0.9375,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,0.9375,0.8750,0.8125,0.7500,0.6875,0.6250,0.5625,0.5000,0.4375,0.3750,0.3125,0.2500,0.1875,0.1250,0.0625,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};

//colormap: HOT 
//static const float red[64] = {1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,0.9583,0.9167,0.8750,0.8333,0.7917,0.7500,0.7083,0.6667,0.6250,0.5833,0.5417,0.5000,0.4583,0.4167,0.3750,0.3333,0.2917,0.2500,0.2083,0.1667,0.1250,0.0833,0.0417};

//static const float green[64] = {1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000,0.9583,0.9167,0.8750,0.8333,0.7917,0.7500,0.7083,0.6667,0.6250,0.5833,0.5417,0.5000,0.4583,0.4167,0.3750,0.3333,0.2917,0.2500,0.2083,0.1667,0.1250,0.0833,0.0417,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};

//static const float blue[64] = {1.0000,0.9375,0.8750,0.8125,0.7500,0.6875,0.6250,0.5625,0.5000,0.4375,0.3750,0.3125,0.2500,0.1875,0.1250,0.0625,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
}

//colormap: BONE
//static const float red[64] = {1.0000,0.9783,0.9566,0.9349,0.9132,0.8915,0.8698,0.8481,0.8264,0.8047,0.7830,0.7613,0.7396,0.7179,0.6962,0.6745,0.6528,0.6389,0.6250,0.6111,0.5972,0.5833,0.5694,0.5556,0.5417,0.5278,0.5139,0.5000,0.4861,0.4722,0.4583,0.4444,0.4306,0.4167,0.4028,0.3889,0.3750,0.3611,0.3472,0.3333,0.3194,0.3056,0.2917,0.2778,0.2639,0.2500,0.2361,0.2222,0.2083,0.1944,0.1806,0.1667,0.1528,0.1389,0.1250,0.1111,0.0972,0.0833,0.0694,0.0556,0.0417,0.0278,0.0139,0};
//static const float green[64] = {1.0000,0.9861,0.9722,0.9583,0.9444,0.9306,0.9167,0.9028,0.8889,0.8750,0.8611,0.8472,0.8333,0.8194,0.8056,0.7917,0.7778,0.7587,0.7396,0.7205,0.7014,0.6823,0.6632,0.6441,0.6250,0.6059,0.5868,0.5677,0.5486,0.5295,0.5104,0.4913,0.4722,0.4531,0.4340,0.4149,0.3958,0.3767,0.3576,0.3385,0.3194,0.3056,0.2917,0.2778,0.2639,0.2500,0.2361,0.2222,0.2083,0.1944,0.1806,0.1667,0.1528,0.1389,0.1250,0.1111,0.0972,0.0833,0.0694,0.0556,0.0417,0.0278,0.0139,0};
//static const float blue[64] = {1.0000,0.9861,0.9722,0.9583,0.9444,0.9306,0.9167,0.9028,0.8889,0.8750,0.8611,0.8472,0.8333,0.8194,0.8056,0.7917,0.7778,0.7639,0.7500,0.7361,0.7222,0.7083,0.6944,0.6806,0.6667,0.6528,0.6389,0.6250,0.6111,0.5972,0.5833,0.5694,0.5556,0.5417,0.5278,0.5139,0.5000,0.4861,0.4722,0.4583,0.4444,0.4253,0.4062,0.3872,0.3681,0.3490,0.3299,0.3108,0.2917,0.2726,0.2535,0.2344,0.2153,0.1962,0.1771,0.1580,0.1389,0.1198,0.1007,0.0816,0.0625,0.0434,0.0243,0.0052};


#endif
