"""autogenerated by genpy from octo_raytrace/raytrace_rmld.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class raytrace_rmld(genpy.Message):
  _md5sum = "fc2bde0ec68eb095a15b4032843ae8dc"
  _type = "octo_raytrace/raytrace_rmld"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float32 startX
float32 startY
float32 startZ
float32 endX
float32 endY
float32 endZ
float32 ppmm



"""
  __slots__ = ['startX','startY','startZ','endX','endY','endZ','ppmm']
  _slot_types = ['float32','float32','float32','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       startX,startY,startZ,endX,endY,endZ,ppmm

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(raytrace_rmld, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.startX is None:
        self.startX = 0.
      if self.startY is None:
        self.startY = 0.
      if self.startZ is None:
        self.startZ = 0.
      if self.endX is None:
        self.endX = 0.
      if self.endY is None:
        self.endY = 0.
      if self.endZ is None:
        self.endZ = 0.
      if self.ppmm is None:
        self.ppmm = 0.
    else:
      self.startX = 0.
      self.startY = 0.
      self.startZ = 0.
      self.endX = 0.
      self.endY = 0.
      self.endZ = 0.
      self.ppmm = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_7f.pack(_x.startX, _x.startY, _x.startZ, _x.endX, _x.endY, _x.endZ, _x.ppmm))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 28
      (_x.startX, _x.startY, _x.startZ, _x.endX, _x.endY, _x.endZ, _x.ppmm,) = _struct_7f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_7f.pack(_x.startX, _x.startY, _x.startZ, _x.endX, _x.endY, _x.endZ, _x.ppmm))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 28
      (_x.startX, _x.startY, _x.startZ, _x.endX, _x.endY, _x.endZ, _x.ppmm,) = _struct_7f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_7f = struct.Struct("<7f")
